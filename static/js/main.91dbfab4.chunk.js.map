{"version":3,"sources":["components/InputBox/InputBox.js","utils/ApiDataService.js","model/BibModel.js","App.js","reportWebVitals.js","index.js"],"names":["InputBox","icon","placeholder","inputText","inputTextChange","onEnter","onClear","className","Form","Group","controlId","InputGroup","Prepend","Button","variant","onClick","style","color","fontSize","Control","type","value","onChange","e","target","onKeyPress","key","length","Append","SERVER_URL","SERVER_URL_AFTER_ID_COLLECTION","SERVER_URL_AFTER_ID_BIB","types","COLLECTIONS","REPRESENTATIONS","NONE","id","pageNum","pageSize","a","getURL","console","log","axios","get","res","response","error","getDataById","BibModel","mms_id","title","call_number","totalBibs","rep_id","rep_url","this","mmsid","callNumber","repId","repUrl","App","useState","loading","setLoading","searchCollectionText","setSearchCollectionText","bibs","setBibs","globalError","setGlobalError","errorMessage","setErrorMessage","success","setSuccess","totalBibNumberInCollection","setTotalBibNumberInCollection","setPercentProgress","MAX_PAGE_SIZE","ExportToExcel","fn","dl","sort","b","nameA","toUpperCase","nameB","elt","DOMParser","parseFromString","htmlStrStart","i","getHtmlString","getElementById","wb","XLSX","table_to_book","Workbook","Views","RTL","sheet","raw","Sheets","push","width","Math","max","map","bookType","bookSST","params","getCallNumberField","data","fields","getElementsByTagName","getAttribute","childNodes","innerHTML","ApiDataService","total_record_count","bib","bibDataTotalResults","dataArr","bib_item","index","parseInt","functions","Promise","all","bibsResponse","bibResponse","bibMarcXmlData","anies","setCallNumber","replace","repResponse","representation","undefined","delivery_url","setRepId","setRepUrl","useEffect","downloadDocx","Container","fluid","Alert","onClose","src","alt","margin","Row","text","Spinner","animation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document"],"mappings":"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","file":"static/js/main.91dbfab4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, InputGroup, Button, ListGroup } from 'react-bootstrap';\r\nimport './InputBox.css'\r\n\r\n\r\nfunction InputBox({ icon, placeholder, inputText, inputTextChange, onEnter, onClear }) {\r\n    return (\r\n        <div className=\"c-input-box\">\r\n            <Form.Group controlId=\"formInputBox\">\r\n                <InputGroup>\r\n                    <InputGroup.Prepend>\r\n                        <Button variant=\"link\" onClick={() => onClear()}><i className=\"bi bi-x-lg\" style={{ color: 'red', fontSize: '2rem' }}></i></Button>\r\n                    </InputGroup.Prepend>\r\n                    {/* <Button variant=\"dark\" onClick={() => onClear()}><i className=\"bi bi-x\" style={{ color: 'red' }}></i></Button> */}\r\n                    <Form.Control type=\"text\" placeholder={placeholder}\r\n                        value={inputText} onChange={e => inputTextChange(e.target.value)} onKeyPress={e => e.key === 'Enter' && e.target.value.length > 0 ? onEnter(e.target.value) : null}\r\n                    />\r\n                    {/* <button type=\"button\" class=\"btn bg-transparent\" style=\"margin-left: -40px; z-index: 100;\">\r\n                        <i class=\"bi bi-x\"></i>\r\n                    </button> */}\r\n                    <InputGroup.Append>\r\n                        <Button variant=\"link\" onClick={e => onEnter(e.target.value)}><i className=\"bi bi-filetype-xlsx\" style={{ color: 'black', fontSize: '2rem' }}></i></Button>\r\n                        {/* <Button variant=\"outline-secondary\" onClick={e => onEnter(e.target.value)}><i className=\"bi bi-filetype-xlsx\" style={{ color: 'gray', fontSize: '2rem' }}></i></Button> */}\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n            </Form.Group>\r\n        </div>\r\n        //     <div class=\"input-group\">\r\n        //     <input type=\"text\" class=\"form-control\" placeholder=\"Search...\">\r\n        //     <button type=\"button\" class=\"btn bg-transparent\" style=\"margin-left: -40px; z-index: 100;\">\r\n        //       <i class=\"fa fa-times\"></i>\r\n        //     </button>\r\n        // </div>\r\n\r\n    );\r\n}\r\n\r\nexport default InputBox;","import axios from \"axios\";\r\n\r\nconst SERVER_URL = \"https://cors-proxy-alma.herokuapp.com/almaws/v1/bibs/\";\r\n//const SERVER_URL = \"https://api-eu.hosted.exlibrisgroup.com/almaws/v1/bibs/collections/\";\r\nconst SERVER_URL_AFTER_ID_COLLECTION = \"/bibs?\";//offset=0&limit=100\";\r\nconst SERVER_URL_AFTER_ID_BIB = \"?view=full&expand=None\";\r\n//const API_KEY = \"&apikey=l8xx3380e09cbbc2490cbaee30eb37bc1376\";\r\n//\"https://api-eu.hosted.exlibrisgroup.com/almaws/v1/bibs/collections/$collectionID/bibs?offset=$offset&limit=100&apikey=l8xx3380e09cbbc2490cbaee30eb37bc1376\";\r\n//\"https://api-eu.hosted.exlibrisgroup.com/almaws/v1/bibs/$MMSID?view=full&expand=None&apikey=l8xx3380e09cbbc2490cbaee30eb37bc1376\";\r\n///almaws/v1/bibs/{mms_id}/representations\r\n\r\nconst types = {\r\n    COLLECTIONS: \"collections/\",\r\n    REPRESENTATIONS: \"/representations\",\r\n    NONE: \"\"\r\n}\r\n\r\nasync function getDataById(type, id, pageNum, pageSize) {\r\n    const getURL = type==types.COLLECTIONS ? \r\n    SERVER_URL + type + id + SERVER_URL_AFTER_ID_COLLECTION + \"offset=\" + pageNum + \"&limit=\" + pageSize :\r\n    type==types.REPRESENTATIONS ?\r\n    SERVER_URL + id + type :\r\n    SERVER_URL + id + SERVER_URL_AFTER_ID_BIB;\r\n    try {\r\n        console.log(getURL);\r\n        const res = await axios.get(getURL);\r\n        return({response: res, error: null});\r\n    } catch (err) {\r\n        console.error(\"Error while geting collection with id= \" + id, err);\r\n        return({response: null, error: err});\r\n    }\r\n}\r\n\r\nexport default { getDataById, types }","export default class BibModel {\r\n    constructor(mms_id, title, call_number, totalBibs, rep_id, rep_url) {\r\n        this.mmsid = mms_id;\r\n        this.title = title;\r\n        this.callNumber = call_number;\r\n        this.totalBibs = totalBibs;\r\n        this.repId = rep_id;\r\n        this.repUrl = rep_url;\r\n    }\r\n\r\n    setCallNumber(call_number) {\r\n        this.callNumber = call_number;\r\n    }\r\n\r\n    setTotalBibs(totalBibs) {\r\n        this.totalBibs = totalBibs; \r\n    }\r\n\r\n    setRepId(rep_id) {\r\n        this.repId = rep_id;\r\n    }\r\n\r\n    setRepUrl(rep_url) {\r\n        this.repUrl = rep_url;\r\n    }\r\n}","import './App.css';\r\nimport { Container, Spinner, Alert, Row } from \"react-bootstrap\";\r\nimport InputBox from \"./components/InputBox/InputBox\";\r\nimport { useEffect, useState } from 'react';\r\nimport ApiDataService from './utils/ApiDataService';\r\nimport BibModel from './model/BibModel';\r\n// import ProgressComponent from './components/ProgressComponent/ProgressComponent'\r\n// import BibCard from \"./components/BibCard/BibCard\"\r\n// import HTMLtoDOCX from 'html-to-docx';\r\n// import { saveAs } from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n//import { marc } from \"marc4js\"; \r\n\r\n\r\nfunction App() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchCollectionText, setSearchCollectionText] = useState(\"\");\r\n  const [bibs, setBibs] = useState([]);\r\n  const [globalError, setGlobalError] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"אירעה שגיאה\");\r\n  const [success, setSuccess] = useState(false);\r\n  const [totalBibNumberInCollection, setTotalBibNumberInCollection] = useState(0);\r\n  const [percentProgress, setPercentProgress] = useState(0);\r\n  const MAX_PAGE_SIZE = 100;//0-100\r\n  const TAG = \"098\";\r\n\r\n  //const bibCards = bibs !== undefined ? bibs.map((bib, index) => <BibCard key={index.toString()} bib={bib} index={index}></BibCard>) : [];\r\n\r\n  useEffect(() => {\r\n    if (bibs.length > 0 && bibs.length == totalBibNumberInCollection) {\r\n      downloadDocx();\r\n    }\r\n  }, [bibs])\r\n\r\n  function clear() {\r\n    console.log(\"clear pressed!!!\");\r\n    setTotalBibNumberInCollection(0);\r\n    setSearchCollectionText(\"\");\r\n    setBibs([]);\r\n    setErrorMessage(\"\");\r\n    setGlobalError(false);\r\n    setSuccess(false);\r\n  }\r\n  //{book.mmsid && <Card.Link href={\"https://haifa-primo.hosted.exlibrisgroup.com/primo-explore/search?query=any,contains,\" + book.mmsid + \"&tab=haifa_all&vid=HAU&lang=iw_IL\"} target=\"_blank\"><Card.Text>הספר בקטלוג אוניברסיטת חיפה </Card.Text></Card.Link>}\r\n  //<a href=\"url\">link text</a>\r\n\r\n  function sortBibs() {\r\n    bibs.sort(function (a, b) {\r\n      const nameA = a.callNumber.toUpperCase(); // ignore upper and lowercase\r\n      const nameB = b.callNumber.toUpperCase(); // ignore upper and lowercase\r\n      if (nameA < nameB) {\r\n        return -1;\r\n      }\r\n      if (nameA > nameB) {\r\n        return 1;\r\n      }\r\n\r\n      // names must be equal\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  function getHtmlString() {\r\n    let htmlStrStart = `html dir=\"rtl\" lang=\"he-IL\" class=\"no-js no-svg\">\r\n    <head>\r\n        <meta charset=\"UTF-8\" />\r\n    </head>\r\n    <body>\r\n        <table id=\"tbl_exporttable_to_xls\">\r\n            <th>כותר</th>\r\n            <th>כותר מתוקן</th>\r\n            <th>הערות</th>\r\n            <th>קישור</th>\r\n            <th>MMS ID</th>\r\n            <th>מספר מיון</th>\r\n            <tbody>`\r\n    for (let i = 0; i < bibs.length; i++) {\r\n      htmlStrStart += '<tr><td>' + bibs[i].title + '</td><td>' + \"&nbsp;\" + '</td><td>' + \"&nbsp;\" + '</td><td>' + '<a href=' + bibs[i].repUrl + '>' + bibs[i].repId + '</a>' + '</td><td>' + bibs[i].mmsid + '</td><td>' + bibs[i].callNumber + '</td></tr>'\r\n      // htmlStrStart += '<tr><td>' + bibs[i].mmsid + '</td><td>' + bibs[i].title + '</td><td>' + bibs[i].callNumber + '</td><td>' + '<a href=' + \"https://haifa-primo.hosted.exlibrisgroup.com/primo-explore/search?query=any,contains,\" + bibs[i].repId + \"&tab=haifa_all&vid=HAU&lang=iw_IL target=_blank\" + '>' + bibs[i].mmsid + '</a>' + '</td><td>' + \"\" + '</td><td>' + \"\" + '</td></tr>'\r\n      // htmlStrStart += '<tr><td>' + bibs[i].mmsid + '</td><td>' + flipBracketsDirection(bibs[i].title) + '</td><td>' + bibs[i].callNumber + '</td></tr>'\r\n    }\r\n    htmlStrStart +=\r\n      `</tbody>\r\n            </table>\r\n        </body>\r\n    </html>`\r\n    debugger\r\n    return htmlStrStart;\r\n  }\r\n\r\n  function ExportToExcel(type, fn, dl) {\r\n    console.log(\"This should happen only once!!!\");\r\n    sortBibs();\r\n    var doc = new DOMParser().parseFromString(getHtmlString(), \"text/html\");\r\n    var elt = doc.getElementById('tbl_exporttable_to_xls');\r\n    var wb = XLSX.utils.table_to_book(elt, { Workbook: { Views: [{ RTL: true }] }, sheet: \"sheet1\", raw: true });\r\n    if (wb.Workbook) { wb.Workbook.Views[0]['RTL'] = true; } else { wb.Workbook = {}; wb.Workbook['Views'] = [{ RTL: true }]; }\r\n    //bibs.map(b => b.title)\r\n    //Math.max(...(bibs.map(b => b.length)));\r\n    //Math.max.apply(Math, bibs.map(function(b) { return b.title; })) + 2 \r\n    //console.log(\"Title width: \" + Math.max(...(bibs.map(b => b.title.length))));\r\n    wb.Sheets['sheet1']['!cols'].push({ width: 100}, { width: 20 }, { width: 20 }, { width: 20 }, { width: 20 }, { width: Math.max(...(bibs.map(b => b.callNumber.length))) })\r\n    debugger\r\n    setPercentProgress(100);\r\n    return dl ?\r\n      XLSX.write(wb, { bookType: type, bookSST: true, type: 'base64'}) :\r\n      XLSX.writeFile(wb, fn || (searchCollectionText + '.' + (type || 'xlsx')));\r\n  }\r\n\r\n  async function downloadDocx(params) {\r\n    // console.log(\"downloadDocx\");\r\n    // console.log(getHtmlString());\r\n    //await HTMLtoDOCX(htmlString, headerHTMLString, documentOptions, footerHTMLString)\r\n    // const fileBuffer = await HTMLtoDOCX(getHtmlString(), null, {\r\n    //   table: { row: { cantSplit: true } },\r\n    //   orientation: \"landscape\",\r\n    //   title: \"Adi's test\",\r\n    //   footer: true,\r\n    //   pageNumber: true,\r\n    // });\r\n\r\n    ExportToExcel('xlsx');\r\n    setSuccess(true);\r\n    // saveAs(fileBuffer, 'html-to-docx.docx');\r\n  }\r\n\r\n  function getCallNumberField(data) {\r\n    var parser = new DOMParser();\r\n    var xmlDoc = parser.parseFromString(data, \"text/xml\");\r\n    let callNumber = \"\";\r\n    const fields = xmlDoc.getElementsByTagName(\"datafield\");\r\n    for (let i = 0; i < fields.length; i++) {\r\n      if (TAG == fields[i].getAttribute('tag')) {\r\n        callNumber = fields[i].childNodes[0] ? fields[i].childNodes[0].innerHTML : \"\";\r\n        break;\r\n      }\r\n    }\r\n    return callNumber;\r\n  }\r\n\r\n  async function handleInputEnter(pageNum) {\r\n    setBibs([]);\r\n    setTotalBibNumberInCollection(0);\r\n    setGlobalError(false);\r\n    setSuccess(false);\r\n\r\n\r\n    setLoading(true);\r\n    const response = await ApiDataService.getDataById(ApiDataService.types.COLLECTIONS, searchCollectionText, 0, MAX_PAGE_SIZE);\r\n    setLoading(false);\r\n    if (response.error) {\r\n      setGlobalError(true);\r\n      //setErrorMessage(response.error);\r\n    }\r\n    else {\r\n      if (response.response) {\r\n        if (response.response.data.total_record_count > 0) {\r\n          setPercentProgress(10);\r\n          const data = response.response.data.bib;\r\n          let bibDataTotalResults = [];\r\n          //setBibs(data.map((bib_item) => new BibModel(bib_item.mms_id, bib_item.title)));\r\n          //setBibs(bibs => bibs.concat(data.map((bib_item) => new BibModel(bib_item.mms_id, bib_item.title))));\r\n          //const bibsDataResult = data.map((bib_item) => new BibModel(bib_item.mms_id, bib_item.title));\r\n          const dataArr = data.map((bib_item) => new BibModel(bib_item.mms_id, bib_item.title));\r\n          bibDataTotalResults = [...bibDataTotalResults, ...dataArr]; //Here it is the result of all bibs in the first page\r\n          setTotalBibNumberInCollection(response.response.data.total_record_count);\r\n          if (response.response.data.bib.length < response.response.data.total_record_count) {//If there are more pages\r\n            let index = response.response.data.total_record_count % 100 == 0 ? parseInt(response.response.data.total_record_count / 100) : parseInt(response.response.data.total_record_count / 100) + 1;\r\n            const functions = []; //Array of all the pages num\r\n            for (let i = 1; i < index; ++i) {\r\n              functions.push(i * 100);\r\n            }\r\n            // const promise1 = Promise.resolve(3);\r\n            // const promise2 = 42;\r\n            // const promise3 = new Promise(function (resolve, reject) {\r\n            //   setTimeout(resolve, 100, 'foo');\r\n            // });\r\n\r\n            // Promise.all([promise1, promise2, promise3]).then(function (values) {\r\n            //   console.log(values);\r\n            // });\r\n            // expected output: Array [3, 42, \"foo\"]\r\n            // let promise = new Promise(function(resolve, reject) {\r\n            //   resolve(\"done\");\r\n\r\n            //   reject(new Error(\"…\")); // ignored\r\n            //   setTimeout(() => resolve(\"…\")); // ignored\r\n            // });\r\n            // const promises = [];\r\n            // for (let i = 0; i < index; ++i) {\r\n            //   const promise = new Promise(function (resolve, reject) {\r\n            //     setLoading(true);\r\n            //     const response = ApiDataService.getDataById(ApiDataService.types.COLLECTIONS, searchCollectionText, i, MAX_PAGE_SIZE);\r\n            //     debugger\r\n            //     setLoading(false);\r\n            //     if (response.error) {\r\n            //       setGlobalError(true);\r\n            //       reject(response.error);\r\n            //     }\r\n            //     else {\r\n            //       if (response.response) {\r\n            //         debugger\r\n            //         const data = response.response.data.bib;\r\n            //         const bibsDataResult = data.map((bib_item) => new BibModel(bib_item.mms_id, bib_item.title));\r\n            //         debugger\r\n            //         resolve(bibsDataResult);\r\n            //       };\r\n            //     }\r\n            //   })\r\n            //   promises.push(promise);\r\n            // }\r\n            // Promise.all(promises).then(values => {\r\n            //   debugger\r\n            //   console.log(\"The valus are: \" + values);\r\n            //   bibDataTotalResults = values;\r\n            // });\r\n            setLoading(true);\r\n            //Here we call to get all the bibs from pages >= 100\r\n            await Promise.all(\r\n              functions.map(async (index) => {\r\n                const bibsResponse = await ApiDataService.getDataById(ApiDataService.types.COLLECTIONS, searchCollectionText, index, MAX_PAGE_SIZE)\r\n                if (bibsResponse.error) {\r\n                  setGlobalError(true);\r\n                  //setErrorMessage(bibsResponse.error);\r\n                }\r\n                else {\r\n                  if (bibsResponse.response) {\r\n                    const data = bibsResponse.response.data.bib;\r\n                    const dataArr = data.map((bib_item) => new BibModel(bib_item.mms_id, bib_item.title));\r\n                    bibDataTotalResults = [...bibDataTotalResults, ...dataArr];\r\n                    setPercentProgress(30);\r\n                    setLoading(false);\r\n                  }\r\n                }\r\n              })\r\n            )\r\n          }\r\n\r\n          setLoading(true);\r\n          //Here we call to get data for every bib by its id\r\n          await Promise.all(\r\n            bibDataTotalResults.map(async (bib) => {\r\n              const bibResponse = await ApiDataService.getDataById(ApiDataService.types.NONE, bib.mmsid);\r\n              if (bibResponse.error) {\r\n                setGlobalError(true);\r\n                //setErrorMessage(bibResponse.error);\r\n              }\r\n              else {\r\n                if (bibResponse.response) {\r\n                  const bibMarcXmlData = bibResponse.response.data.anies[0];\r\n                  let callNumber = getCallNumberField(bibMarcXmlData);\r\n                  bib.setCallNumber(callNumber.replace(/ /g, ''));\r\n                  setPercentProgress(60);\r\n                }\r\n              }\r\n            })\r\n          )\r\n          //Here we call to get the representation of every bib by the id\r\n          await Promise.all(\r\n            bibDataTotalResults.map(async (bib) => {\r\n              const repResponse = await ApiDataService.getDataById(ApiDataService.types.REPRESENTATIONS, bib.mmsid);\r\n              if (repResponse.error) {\r\n                setGlobalError(true);\r\n                //setErrorMessage(repResponse.error);\r\n              }\r\n              else {\r\n                if (repResponse.response) {\r\n                  if (repResponse.response.data.total_record_count > 0) {\r\n                    const repId = repResponse.response.data.representation[0] ? repResponse.response.data.representation[0].id : undefined;\r\n                    //const repId = repResponse.response.data.representation[0].thumbnail_url;\r\n                    const repUrl = repResponse.response.data.representation[0].delivery_url;\r\n                    if (!repId) {\r\n                      console.log(\"undefine!!!!\");\r\n                    }\r\n                    bib.setRepId(repId);\r\n                    bib.setRepUrl(repUrl);\r\n                  }\r\n                  else {\r\n                    bib.setRepId(\"אין תמונה\");\r\n                    bib.setRepUrl(\"\");\r\n                  }\r\n                  setPercentProgress(90);\r\n                }\r\n              }\r\n            })\r\n          )\r\n          setBibs(bibDataTotalResults);\r\n          setLoading(false);\r\n        }\r\n        else {\r\n          setGlobalError(true);\r\n          setErrorMessage(\"אין רשומות באוסף זה\");\r\n        }\r\n        // setLoading(true);\r\n        // //if (bibs.length == response.response.data.total_record_count) {\r\n        // bibsDataResult.forEach(bib => {\r\n        //   const bibResponse = ApiDataService.getDataById(ApiDataService.types.NONE, bib.mmsid);\r\n        //   if (bibResponse.error) {\r\n        //     setGlobalError(true);\r\n        //   }\r\n        //   else {\r\n        //     if (bibResponse.response) {\r\n        //       debugger\r\n        //       const bibMarcXmlData = bibResponse.response.data.anies;\r\n        //       getCallNumberField(bibMarcXmlData);\r\n        //     }\r\n        //   }\r\n        // });\r\n        // await Promise.all();\r\n        // setLoading(false);\r\n        // //}\r\n\r\n        //setBibs(data.map((plainBib) => new BibModel(plainBib)));\r\n        //setTotalPages(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container fluid>\r\n        <div>\r\n          {globalError && <Alert variant=\"danger\" onClose={() => setGlobalError(false)}>\r\n            {errorMessage}\r\n          </Alert>}\r\n          {success && <Alert variant=\"success\" onClose={() => setSuccess(false)}>\r\n            הקובץ מוכן להורדה\r\n          </Alert>}\r\n        </div>\r\n        <img src=\"https://haifa-primo.hosted.exlibrisgroup.com/primo-explore/custom/HAU/img/library-logo.png\" alt=\"ספריית יונס וסוראיה נזריאן\" />\r\n        <div style={{ margin: \"20px\" }}>\r\n          <h2>רשומות ביבליוגרפיות לפי מספר אוסף</h2>\r\n        </div>\r\n        <Row id=\"collection-sub-title\">\r\n          <h4>:(collectionID יש להזין) הורדת קובץ אקסל של רשומות ביבליוגרפיות וקישורים לאובייקטים הדיגיטליים שבהן, על פי מספר אוסף בעלמא</h4>\r\n        </Row>\r\n        <Row id=\"rowForInput\">\r\n          <InputBox\r\n            icon={<i className=\"bi bi-collection-fill\"></i>}\r\n            placeholder=\"מספר אוסף (Collection ID)\"\r\n            onEnter={handleInputEnter}\r\n            inputText={searchCollectionText}\r\n            inputTextChange={(text) => setSearchCollectionText(text)}\r\n            onClear={clear}\r\n          />\r\n        </Row>\r\n        <div className=\"p-bib-cards\">\r\n          {loading && <div className=\"p-subject-spinner\"><Spinner animation=\"border\" variant=\"primary\" /></div>}\r\n          {/* {loading && <ProgressComponent\r\n            percentProgress={percentProgress}\r\n            success={false} \r\n            warning={false} \r\n            error={false}\r\n          />} */}\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}