{"version":3,"sources":["components/InputBox/InputBox.js","utils/ApiDataService.js","model/BibModel.js","components/BibCard/BibCard.js","App.js","reportWebVitals.js","index.js"],"names":["InputBox","icon","placeholder","inputText","inputTextChange","onEnter","onClear","className","Form","Group","controlId","InputGroup","Prepend","Button","variant","onClick","style","color","Control","type","value","onChange","e","target","onKeyPress","key","length","Append","SERVER_URL","SERVER_URL_AFTER_ID_COLLECTION","SERVER_URL_AFTER_ID_BIB","types","COLLECTIONS","REPRESENTATIONS","NONE","id","pageNum","pageSize","a","getURL","axios","get","res","response","error","console","getDataById","BibModel","mms_id","title","call_number","totalBibs","rep_id","rep_url","this","mmsid","callNumber","repId","repUrl","BibCard","App","useState","loading","setLoading","searchCollectionText","setSearchCollectionText","bibs","setBibs","globalError","setGlobalError","setErrorMessage","totalBibNumberInCollection","setTotalBibNumberInCollection","setPercentProgress","MAX_PAGE_SIZE","getHtmlString","htmlStrStart","i","useEffect","downloadDocx","ExportToExcel","fn","dl","log","sort","b","nameA","toUpperCase","nameB","elt","DOMParser","parseFromString","getElementById","wb","XLSX","table_to_book","sheet","raw","bookType","bookSST","params","getCallNumberField","data","fields","getElementsByTagName","getAttribute","childNodes","innerHTML","undefined","ApiDataService","bib","bibDataTotalResults","dataArr","map","bib_item","total_record_count","index","parseInt","functions","push","Promise","all","bibsResponse","bibResponse","bibMarcXmlData","anies","setCallNumber","replace","repResponse","representation","delivery_url","setRepId","setRepUrl","Container","Alert","margin","text","Spinner","animation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document"],"mappings":"qpBAoCeA,MA/Bf,YAAuF,EAAnEC,KAAoE,IAA9DC,EAA6D,EAA7DA,YAAaC,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,gBAAiBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QACxE,OACI,qBAAKC,UAAU,cAAf,SACI,cAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,eAAtB,SACI,eAACC,EAAA,EAAD,WACI,cAACA,EAAA,EAAWC,QAAZ,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,QAAS,kBAAMT,KAAnD,SAA8D,mBAAGC,UAAU,aAAaS,MAAO,CAAEC,MAAO,aAG5G,cAACT,EAAA,EAAKU,QAAN,CAAcC,KAAK,OAAOjB,YAAaA,EACnCkB,MAAOjB,EAAWkB,SAAU,SAAAC,GAAC,OAAIlB,EAAgBkB,EAAEC,OAAOH,QAAQI,WAAY,SAAAF,GAAC,MAAc,UAAVA,EAAEG,KAAmBH,EAAEC,OAAOH,MAAMM,OAAS,EAAIrB,EAAQiB,EAAEC,OAAOH,OAAS,QAKlK,cAACT,EAAA,EAAWgB,OAAZ,UACI,cAACd,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,QAAS,SAAAO,GAAC,OAAIjB,EAAQiB,EAAEC,OAAOH,QAAnE,SAA2E,mBAAGb,UAAU,sBAAsBS,MAAO,CAAEC,MAAO,sB,kBCnBhJW,EAAa,wDAEbC,EAAiC,SACjCC,EAA0B,yBAM1BC,EAAQ,CACVC,YAAa,eACbC,gBAAiB,mBACjBC,KAAM,I,4CAGV,WAA2Bf,EAAMgB,EAAIC,EAASC,GAA9C,iBAAAC,EAAA,6DACUC,EAASpB,GAAMY,EAAMC,YAC3BJ,EAAaT,EAAOgB,EAAKN,EAAiC,UAAYO,EAAU,UAAYC,EAC5FlB,GAAMY,EAAME,gBACZL,EAAaO,EAAKhB,EAClBS,EAAaO,EAAKL,EALtB,kBAO0BU,IAAMC,IAAIF,GAPpC,cAOcG,EAPd,yBAQe,CAACC,SAAUD,EAAKE,MAAO,OARtC,uCAUQC,QAAQD,MAAM,0CAA4CT,EAA1D,MAVR,kBAWe,CAACQ,SAAU,KAAMC,MAAM,EAAD,KAXrC,0D,sBAee,OAAEE,Y,kDAAaf,S,kBChCTgB,E,WACjB,WAAYC,EAAQC,EAAOC,EAAaC,EAAWC,EAAQC,GAAU,oBACjEC,KAAKC,MAAQP,EACbM,KAAKL,MAAQA,EACbK,KAAKE,WAAaN,EAClBI,KAAKH,UAAYA,EACjBG,KAAKG,MAAQL,EACbE,KAAKI,OAASL,E,iDAGlB,SAAcH,GACVI,KAAKE,WAAaN,I,0BAGtB,SAAaC,GACTG,KAAKH,UAAYA,I,sBAGrB,SAASC,GACLE,KAAKG,MAAQL,I,uBAGjB,SAAUC,GACNC,KAAKI,OAASL,M,+CCqBPM,I,SC4UAC,MA1Wf,WACE,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwDF,mBAAS,IAAjE,mBAAOG,EAAP,KAA6BC,EAA7B,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAsCN,oBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAAwCR,mBAAS,IAAjD,mBAAqBS,GAArB,WACA,EAAoET,mBAAS,GAA7E,mBAAOU,EAAP,KAAmCC,EAAnC,KACA,EAA8CX,mBAAS,GAAvD,mBAAwBY,GAAxB,WACMC,EAAgB,IAqDtB,SAASC,IAcP,IAbA,IAAIC,EAAY,ygBAaPC,EAAI,EAAGA,EAAIX,EAAKxC,OAAQmD,IAC/BD,GAAgB,WAAaV,EAAKW,GAAGtB,MAAQ,YAAcW,EAAKW,GAAG5B,MAAQ,YAAciB,EAAKW,GAAGrB,WAAjF,oBAAyHU,EAAKW,GAAGnB,OAAS,IAAMQ,EAAKW,GAAGpB,MAAxJ,mCAWlB,OANAmB,GAAY,+DApEdE,qBAAU,WACJZ,EAAKxC,OAAS,GAAKwC,EAAKxC,QAAU6C,GAd3B,oCAeTQ,KAED,CAACb,IA+EJ,IANA,IAMSW,EAAI,EAAGA,EAAIX,EAAKxC,OAAQmD,IACtB,WAAaX,EAAKW,GAAGtB,MAAQ,YAAcW,EAAKW,GAAG5B,MAAQ,YAAciB,EAAKW,GAAGrB,WAAa,aAQzG,SAASwB,EAAc7D,EAAM8D,EAAIC,GAC/BrC,QAAQsC,IAAI,mCA5DZjB,EAAKkB,MAAK,SAAU9C,EAAG+C,GAErB,IAAMC,EAAQhD,EAAEkB,WAAW+B,cACrBC,EAAQH,EAAE7B,WAAW+B,cAC3B,OAAID,EAAQE,GACF,EAENF,EAAQE,EACH,EAIF,KAkDT,IACIC,GADM,IAAIC,WAAYC,gBAAgBhB,IAAiB,aAC7CiB,eAAe,0BACzBC,EAAKC,IAAWC,cAAcN,EAAK,CAAEO,MAAO,SAAUC,KAAK,IAE/D,OADAxB,EAAmB,KACZS,EACLY,IAAWD,EAAI,CAAEK,SAAU/E,EAAMgF,SAAS,EAAMhF,KAAM,WACtD2E,IAAeD,EAAIZ,GAAOjB,EAAuB,KAAO7C,GAAQ,SAlHvD,4CAqHb,WAA4BiF,GAA5B,SAAA9D,EAAA,sDACEO,QAAQsC,IAAI,gBACZtC,QAAQsC,IAAIR,KAUZK,EAAc,QAZhB,4CArHa,sBA2Ib,SAASqB,EAAmBC,GAK1B,IAJA,IAEI9C,EACE+C,GAHO,IAAIb,WACGC,gBAAgBW,EAAM,YAEpBE,qBAAqB,aAClC3B,EAAI,EAAGA,EAAI0B,EAAO7E,OAAQmD,IACjC,GAxIQ,OAwIG0B,EAAO1B,GAAG4B,aAAa,OAAQ,CACxCjD,EAAa+C,EAAO1B,GAAG6B,WAAW,GAAKH,EAAO1B,GAAG6B,WAAW,GAAGC,eAAYC,EAC3E,MAGJ,OAAOpD,EAtJI,4CAyJb,WAAgCpB,GAAhC,2BAAAE,EAAA,6DACEO,QAAQsC,IAAI,wBACZhB,EAAQ,IACRK,EAA8B,GAG9BT,GAAW,GANb,SAOyB8C,EAAe/D,YAAY+D,EAAe9E,MAAMC,YAAagC,EAAsB,EAAGU,GAP/G,UAOQ/B,EAPR,OAQEoB,GAAW,IACPpB,EAASC,MATf,iBAUIyB,GAAe,GACfC,EAAgB3B,EAASC,OAX7B,4BAcQD,EAASA,SAdjB,oBAeM8B,EAAmB,IACb6B,EAAO3D,EAASA,SAAS2D,KAAKQ,IAChCC,EAAsB,GAIpBC,EAAUV,EAAKW,KAAI,SAACC,GAAD,OAAc,IAAInE,EAASmE,EAASlE,OAAQkE,EAASjE,UAC9E8D,EAAmB,sBAAOA,GAAP,YAA+BC,IAClDxC,EAA8B7B,EAASA,SAAS2D,KAAKa,sBACjDxE,EAASA,SAAS2D,KAAKQ,IAAIpF,OAASiB,EAASA,SAAS2D,KAAKa,oBAxBrE,iBA4BQ,IAHIC,EAAQzE,EAASA,SAAS2D,KAAKa,mBAAqB,KAAO,EAAIE,SAAS1E,EAASA,SAAS2D,KAAKa,mBAAqB,KAAOE,SAAS1E,EAASA,SAAS2D,KAAKa,mBAAqB,KAAO,EAC3LtE,QAAQsC,IAAI,YAAciC,GACpBE,EAAY,GACTzC,EAAI,EAAGA,EAAIuC,IAASvC,EAC3ByC,EAAUC,KAAS,IAAJ1C,GA7BzB,OA2EQd,GAAW,GA3EnB,UA4EcyD,QAAQC,IACZH,EAAUL,IAAV,uCAAc,WAAOG,GAAP,mBAAA9E,EAAA,sEACeuE,EAAe/D,YAAY+D,EAAe9E,MAAMC,YAAagC,EAAsBoD,EAAO1C,GADzG,QACNgD,EADM,QAEK9E,OACfyB,GAAe,GACfC,EAAgBoD,EAAa9E,QAGzB8E,EAAa/E,WACT2D,EAAOoB,EAAa/E,SAAS2D,KAAKQ,IAClCE,EAAUV,EAAKW,KAAI,SAACC,GAAD,OAAc,IAAInE,EAASmE,EAASlE,OAAQkE,EAASjE,UAC9E8D,EAAmB,sBAAOA,GAAP,YAA+BC,IAClDvC,EAAmB,IACnBV,GAAW,IAZH,2CAAd,wDA7EV,eAgGMA,GAAW,GAhGjB,UAiGYyD,QAAQC,IACZV,EAAoBE,IAApB,uCAAwB,WAAOH,GAAP,mBAAAxE,EAAA,sEACIuE,EAAe/D,YAAY+D,EAAe9E,MAAMG,KAAM4E,EAAIvD,OAD9D,QAChBoE,EADgB,QAEN/E,OACdyB,GAAe,GACfC,EAAgBqD,EAAY/E,QAGxB+E,EAAYhF,WACRiF,EAAiBD,EAAYhF,SAAS2D,KAAKuB,MAAM,GACnDrE,EAAa6C,EAAmBuB,GACpCd,EAAIgB,cAActE,EAAWuE,QAAQ,KAAM,KAC3CtD,EAAmB,KAXD,2CAAxB,wDAlGR,yBAkHY+C,QAAQC,IACZV,EAAoBE,IAApB,uCAAwB,WAAOH,GAAP,mBAAAxE,EAAA,sEACIuE,EAAe/D,YAAY+D,EAAe9E,MAAME,gBAAiB6E,EAAIvD,OADzE,QAChByE,EADgB,QAENpF,OACdyB,GAAe,GACfC,EAAgB0D,EAAYpF,QAGxBoF,EAAYrF,WACVqF,EAAYrF,SAAS2D,KAAKa,mBAAqB,GAC3C1D,EAAQuE,EAAYrF,SAAS2D,KAAK2B,eAAe,GAAKD,EAAYrF,SAAS2D,KAAK2B,eAAe,GAAG9F,QAAKyE,EAEvGlD,EAASsE,EAAYrF,SAAS2D,KAAK2B,eAAe,GAAGC,aACtDzE,GACHZ,QAAQsC,IAAI,gBAEd2B,EAAIqB,SAAS1E,GACbqD,EAAIsB,UAAU1E,KAGdoD,EAAIqB,SAAS,qDACbrB,EAAIsB,UAAU,KAEhB3D,EAAmB,KAtBD,2CAAxB,wDAnHR,QA8IMN,EAAQ4C,GACRhD,GAAW,GA/IjB,4CAzJa,wBAkUb,MA7NK,+BA8NH,qBAAKxD,UAAU,MAAf,SACE,eAAC8H,EAAA,EAAD,WACE,8BACGjE,GAAe,cAACkE,EAAA,EAAD,CAAOxH,QAAQ,SAAf,6EASlB,sBAAKE,MAAO,CAAEuH,OAAQ,QAAtB,UACE,oNACA,4lBAEF,cAAC,EAAD,CACEtI,KAAM,mBAAGM,UAAU,0BACnBL,YAAY,sJACZG,QAtVK,4CAuVLF,UAAW6D,EACX5D,gBAAiB,SAACoI,GAAD,OAAUvE,EAAwBuE,IACnDlI,QAtUR,WACEuC,QAAQsC,IAAI,oBACZX,EAA8B,GAC9BP,EAAwB,IACxBE,EAAQ,IACRG,EAAgB,IAChBD,GAAe,MAkUX,qBAAK9D,UAAU,cAAf,SACGuD,GAAW,qBAAKvD,UAAU,oBAAf,SAAmC,cAACkI,EAAA,EAAD,CAASC,UAAU,SAAS5H,QAAQ,sBC9V9E6H,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qBCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAAS3D,eAAe,SAM1B+C,M","file":"static/js/main.841896a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, InputGroup, Button, ListGroup } from 'react-bootstrap';\r\nimport './InputBox.css'\r\n\r\n\r\nfunction InputBox({ icon, placeholder, inputText, inputTextChange, onEnter, onClear }) {\r\n    return (\r\n        <div className=\"c-input-box\">\r\n            <Form.Group controlId=\"formInputBox\">\r\n                <InputGroup>\r\n                    <InputGroup.Prepend>\r\n                        <Button variant=\"outline-secondary\" onClick={() => onClear()}><i className=\"bi bi-x-lg\" style={{ color: 'red' }}></i></Button>\r\n                    </InputGroup.Prepend>\r\n                    {/* <Button variant=\"dark\" onClick={() => onClear()}><i className=\"bi bi-x\" style={{ color: 'red' }}></i></Button> */}\r\n                    <Form.Control type=\"text\" placeholder={placeholder}\r\n                        value={inputText} onChange={e => inputTextChange(e.target.value)} onKeyPress={e => e.key === 'Enter' && e.target.value.length > 0 ? onEnter(e.target.value) : null}\r\n                    />\r\n                    {/* <button type=\"button\" class=\"btn bg-transparent\" style=\"margin-left: -40px; z-index: 100;\">\r\n                        <i class=\"bi bi-x\"></i>\r\n                    </button> */}\r\n                    <InputGroup.Append>\r\n                        <Button variant=\"outline-secondary\" onClick={e => onEnter(e.target.value)}><i className=\"bi bi-filetype-xlsx\" style={{ color: 'gray' }}></i></Button>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n            </Form.Group>\r\n        </div>\r\n        //     <div class=\"input-group\">\r\n        //     <input type=\"text\" class=\"form-control\" placeholder=\"Search...\">\r\n        //     <button type=\"button\" class=\"btn bg-transparent\" style=\"margin-left: -40px; z-index: 100;\">\r\n        //       <i class=\"fa fa-times\"></i>\r\n        //     </button>\r\n        // </div>\r\n\r\n    );\r\n}\r\n\r\nexport default InputBox;","import axios from \"axios\";\r\n\r\nconst SERVER_URL = \"https://cors-proxy-alma.herokuapp.com/almaws/v1/bibs/\";\r\n//const SERVER_URL = \"https://api-eu.hosted.exlibrisgroup.com/almaws/v1/bibs/collections/\";\r\nconst SERVER_URL_AFTER_ID_COLLECTION = \"/bibs?\";//offset=0&limit=100\";\r\nconst SERVER_URL_AFTER_ID_BIB = \"?view=full&expand=None\";\r\n//const API_KEY = \"&apikey=l8xx3380e09cbbc2490cbaee30eb37bc1376\";\r\n//\"https://api-eu.hosted.exlibrisgroup.com/almaws/v1/bibs/collections/$collectionID/bibs?offset=$offset&limit=100&apikey=l8xx3380e09cbbc2490cbaee30eb37bc1376\";\r\n//\"https://api-eu.hosted.exlibrisgroup.com/almaws/v1/bibs/$MMSID?view=full&expand=None&apikey=l8xx3380e09cbbc2490cbaee30eb37bc1376\";\r\n///almaws/v1/bibs/{mms_id}/representations\r\n\r\nconst types = {\r\n    COLLECTIONS: \"collections/\",\r\n    REPRESENTATIONS: \"/representations\",\r\n    NONE: \"\"\r\n}\r\n\r\nasync function getDataById(type, id, pageNum, pageSize) {\r\n    const getURL = type==types.COLLECTIONS ? \r\n    SERVER_URL + type + id + SERVER_URL_AFTER_ID_COLLECTION + \"offset=\" + pageNum + \"&limit=\" + pageSize :\r\n    type==types.REPRESENTATIONS ?\r\n    SERVER_URL + id + type :\r\n    SERVER_URL + id + SERVER_URL_AFTER_ID_BIB;\r\n    try {\r\n        const res = await axios.get(getURL);\r\n        return({response: res, error: null});\r\n    } catch (err) {\r\n        console.error(\"Error while geting collection with id= \" + id, err);\r\n        return({response: null, error: err});\r\n    }\r\n}\r\n\r\nexport default { getDataById, types }","export default class BibModel {\r\n    constructor(mms_id, title, call_number, totalBibs, rep_id, rep_url) {\r\n        this.mmsid = mms_id;\r\n        this.title = title;\r\n        this.callNumber = call_number;\r\n        this.totalBibs = totalBibs;\r\n        this.repId = rep_id;\r\n        this.repUrl = rep_url;\r\n    }\r\n\r\n    setCallNumber(call_number) {\r\n        this.callNumber = call_number;\r\n    }\r\n\r\n    setTotalBibs(totalBibs) {\r\n        this.totalBibs = totalBibs; \r\n    }\r\n\r\n    setRepId(rep_id) {\r\n        this.repId = rep_id;\r\n    }\r\n\r\n    setRepUrl(rep_url) {\r\n        this.repUrl = rep_url;\r\n    }\r\n}","import { Card } from \"react-bootstrap\";\r\nimport './BibCard.css';\r\n\r\nfunction BibCard({ bib, index }) {\r\n    //const divRef = React.useRef();\r\n    // const handleClick = () => {\r\n    //   console.log(divRef.current.outerHTML);\r\n    //  };\r\n    //  return (\r\n    //      <div ref={divRef}>\r\n    //        <button onClick={handleClick}>Get HTML</button>\r\n    //        <p>Some text inside ...</p>\r\n    //      </div>\r\n    //  );\r\n    debugger\r\n    return (\r\n        <div className=\"c-bib-card\">\r\n            <Card>\r\n                <Card.Body>\r\n                    <Card.Title>כותרת: {bib.title}</Card.Title>\r\n                    <Card.Text>מספר מערכת: {bib.mmsid}</Card.Text>\r\n                    <Card.Text>call number: {bib.callNumber}</Card.Text>\r\n                    <Card.Text>מספר: {index}</Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n        // <html ref={divRef} dir=\"rtl\" lang=\"he-IL\" class=\"no-js no-svg\">\r\n        //     <head>\r\n        //         <meta charset=\"UTF-8\" />\r\n        //     </head>\r\n        //     <body>\r\n        //         <table>\r\n        //             <th>MMS ID</th>\r\n        //             <th>Title</th>\r\n        //             <th>Call Number </th>\r\n        //             <tbody>\r\n        //                 <tr><td>{bib.mmsid}</td><td>{bib.title}</td><td>{bib.callNumber}</td></tr>\r\n        //             </tbody>\r\n        //         </table>\r\n        //     </body>\r\n        // </html>\r\n    )\r\n}\r\n\r\nexport default BibCard;","import './App.css';\nimport { Container, Spinner, Alert, Button } from \"react-bootstrap\";\nimport InputBox from \"./components/InputBox/InputBox\";\nimport { useEffect, useState } from 'react';\nimport ApiDataService from './utils/ApiDataService';\nimport BibModel from './model/BibModel';\nimport ProgressComponent from './components/ProgressComponent/ProgressComponent'\nimport BibCard from \"./components/BibCard/BibCard\"\nimport HTMLtoDOCX from 'html-to-docx';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\n//import { marc } from \"marc4js\"; \n\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [searchCollectionText, setSearchCollectionText] = useState(\"\");\n  const [bibs, setBibs] = useState([]);\n  const [globalError, setGlobalError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [totalBibNumberInCollection, setTotalBibNumberInCollection] = useState(0);\n  const [percentProgress, setPercentProgress] = useState(0);\n  const MAX_PAGE_SIZE = 100;//0-100\n  const TAG = \"098\";\n\n  //const bibCards = bibs !== undefined ? bibs.map((bib, index) => <BibCard key={index.toString()} bib={bib} index={index}></BibCard>) : [];\n\n  useEffect(() => {\n    if (bibs.length > 0 && bibs.length == totalBibNumberInCollection) {\n      downloadDocx();\n    }\n  }, [bibs])\n\n  function clear() {\n    console.log(\"clear pressed!!!\");\n    setTotalBibNumberInCollection(0);\n    setSearchCollectionText(\"\");\n    setBibs([]);\n    setErrorMessage(\"\");\n    setGlobalError(false);\n  }\n\n  function flipBracketsDirection(str) {\n    function flip(c) {\n      switch (c) {\n        case '(': return ')';\n        case ')': return '(';\n        case '[': return ']';\n        case ']': return '[';\n        case '{': return '}';\n        case '}': return '{';\n        default: return c;\n      }\n    }\n    return Array.from(str).map(c => flip(c)).join('');\n  }\n  //{book.mmsid && <Card.Link href={\"https://haifa-primo.hosted.exlibrisgroup.com/primo-explore/search?query=any,contains,\" + book.mmsid + \"&tab=haifa_all&vid=HAU&lang=iw_IL\"} target=\"_blank\"><Card.Text>הספר בקטלוג אוניברסיטת חיפה </Card.Text></Card.Link>}\n  //<a href=\"url\">link text</a>\n\n  function sortBibs() {\n    bibs.sort(function (a, b) {\n      debugger\n      const nameA = a.callNumber.toUpperCase(); // ignore upper and lowercase\n      const nameB = b.callNumber.toUpperCase(); // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n\n      // names must be equal\n      return 0;\n    });\n  }\n  function getHtmlString() {\n    let htmlStrStart = `html dir=\"rtl\" lang=\"he-IL\" class=\"no-js no-svg\">\n    <head>\n        <meta charset=\"UTF-8\" />\n    </head>\n    <body>\n        <table id=\"tbl_exporttable_to_xls\">\n            <th>MMS ID</th>\n            <th>כותר</th>\n            <th>מספר מיון</th>\n            <th>קישור</th>\n            <th>כותר מתוקן</th>\n            <th>הערות</th>\n            <tbody>`\n    for (let i = 0; i < bibs.length; i++) {\n      htmlStrStart += '<tr><td>' + bibs[i].mmsid + '</td><td>' + bibs[i].title + '</td><td>' + bibs[i].callNumber + '</td><td>' + '<a href=' + bibs[i].repUrl + '>' + bibs[i].repId + '</a>' + '</td><td>' + \"\" + '</td><td>' + \"\" + '</td></tr>'\n      // htmlStrStart += '<tr><td>' + bibs[i].mmsid + '</td><td>' + bibs[i].title + '</td><td>' + bibs[i].callNumber + '</td><td>' + '<a href=' + \"https://haifa-primo.hosted.exlibrisgroup.com/primo-explore/search?query=any,contains,\" + bibs[i].repId + \"&tab=haifa_all&vid=HAU&lang=iw_IL target=_blank\" + '>' + bibs[i].mmsid + '</a>' + '</td><td>' + \"\" + '</td><td>' + \"\" + '</td></tr>'\n      // htmlStrStart += '<tr><td>' + bibs[i].mmsid + '</td><td>' + flipBracketsDirection(bibs[i].title) + '</td><td>' + bibs[i].callNumber + '</td></tr>'\n    }\n    //const tableContent = bibs.map((bib, index) => <tr dangerouslySetInnerHTML={{__html: '<strong>strong text</strong>'}}><td>{bib.mmsid}</td><td>{bib.title}</td><td>{bib.callNumber}</td></tr>);\n    htmlStrStart +=\n      `</tbody>\n            </table>\n        </body>\n    </html>`\n    debugger\n    return htmlStrStart;\n  }\n\n  let table = `\n      <table id=\"tbl_exporttable_to_xls>\n          <th>MMS ID</th>\n          <th>Title</th>\n          <th>Call Number </th>\n          <tbody>`\n  for (let i = 0; i < bibs.length; i++) {\n    table += '<tr><td>' + bibs[i].mmsid + '</td><td>' + bibs[i].title + '</td><td>' + bibs[i].callNumber + '</td></tr>'\n    //table += '<tr><td>' + bibs[i].mmsid + '</td><td>' + flipBracketsDirection(bibs[i].title) + '</td><td>' + bibs[i].callNumber + '</td></tr>'\n  }\n  //const tableContent = bibs.map((bib, index) => <tr dangerouslySetInnerHTML={{__html: '<strong>strong text</strong>'}}><td>{bib.mmsid}</td><td>{bib.title}</td><td>{bib.callNumber}</td></tr>);\n  table +=\n    `</tbody>\n          </table>`\n\n  function ExportToExcel(type, fn, dl) {\n    console.log(\"This should happen only once!!!\");\n    sortBibs();\n    var doc = new DOMParser().parseFromString(getHtmlString(), \"text/html\");\n    var elt = doc.getElementById('tbl_exporttable_to_xls');\n    var wb = XLSX.utils.table_to_book(elt, { sheet: \"sheet1\", raw: true });\n    setPercentProgress(100);\n    return dl ?\n      XLSX.write(wb, { bookType: type, bookSST: true, type: 'base64' }) :\n      XLSX.writeFile(wb, fn || (searchCollectionText + '.' + (type || 'xlsx')));\n  }\n\n  async function downloadDocx(params) {\n    console.log(\"downloadDocx\");\n    console.log(getHtmlString());\n    //await HTMLtoDOCX(htmlString, headerHTMLString, documentOptions, footerHTMLString)\n    // const fileBuffer = await HTMLtoDOCX(getHtmlString(), null, {\n    //   table: { row: { cantSplit: true } },\n    //   orientation: \"landscape\",\n    //   title: \"Adi's test\",\n    //   footer: true,\n    //   pageNumber: true,\n    // });\n\n    ExportToExcel('xlsx');\n\n    // saveAs(fileBuffer, 'html-to-docx.docx');\n  }\n\n  // async function fromHtmlToWordDoc() {\n  //   console.log(\"fromHtmlToWordDoc\");\n  //   await HTMLtoDOCX(htmlString, headerHTMLString, documentOptions, footerHTMLString)\n  //}\n\n  function getCallNumberField(data) {\n    var parser = new DOMParser();\n    var xmlDoc = parser.parseFromString(data, \"text/xml\");\n    let callNumber;\n    const fields = xmlDoc.getElementsByTagName(\"datafield\");\n    for (let i = 0; i < fields.length; i++) {\n      if (TAG == fields[i].getAttribute('tag')) {\n        callNumber = fields[i].childNodes[0] ? fields[i].childNodes[0].innerHTML : undefined;\n        break;\n      }\n    }\n    return callNumber;\n  }\n\n  async function handleInputEnter(pageNum) {\n    console.log(\"!!!!handleInputEnter\");\n    setBibs([]);\n    setTotalBibNumberInCollection(0);\n\n\n    setLoading(true);\n    const response = await ApiDataService.getDataById(ApiDataService.types.COLLECTIONS, searchCollectionText, 0, MAX_PAGE_SIZE);\n    setLoading(false);\n    if (response.error) {\n      setGlobalError(true);\n      setErrorMessage(response.error);\n    }\n    else {\n      if (response.response) {\n        setPercentProgress(10);\n        const data = response.response.data.bib;\n        let bibDataTotalResults = [];\n        //setBibs(data.map((bib_item) => new BibModel(bib_item.mms_id, bib_item.title)));\n        //setBibs(bibs => bibs.concat(data.map((bib_item) => new BibModel(bib_item.mms_id, bib_item.title))));\n        //const bibsDataResult = data.map((bib_item) => new BibModel(bib_item.mms_id, bib_item.title));\n        const dataArr = data.map((bib_item) => new BibModel(bib_item.mms_id, bib_item.title));\n        bibDataTotalResults = [...bibDataTotalResults, ...dataArr];\n        setTotalBibNumberInCollection(response.response.data.total_record_count);\n        if (response.response.data.bib.length < response.response.data.total_record_count) {\n          let index = response.response.data.total_record_count % 100 == 0 ? parseInt(response.response.data.total_record_count / 100) : parseInt(response.response.data.total_record_count / 100) + 1;\n          console.log(\"index is \" + index);\n          const functions = [];\n          for (let i = 1; i < index; ++i) {\n            functions.push(i * 100);\n          }\n          // const promise1 = Promise.resolve(3);\n          // const promise2 = 42;\n          // const promise3 = new Promise(function (resolve, reject) {\n          //   setTimeout(resolve, 100, 'foo');\n          // });\n\n          // Promise.all([promise1, promise2, promise3]).then(function (values) {\n          //   console.log(values);\n          // });\n          // expected output: Array [3, 42, \"foo\"]\n          // let promise = new Promise(function(resolve, reject) {\n          //   resolve(\"done\");\n\n          //   reject(new Error(\"…\")); // ignored\n          //   setTimeout(() => resolve(\"…\")); // ignored\n          // });\n          // const promises = [];\n          // for (let i = 0; i < index; ++i) {\n          //   const promise = new Promise(function (resolve, reject) {\n          //     setLoading(true);\n          //     const response = ApiDataService.getDataById(ApiDataService.types.COLLECTIONS, searchCollectionText, i, MAX_PAGE_SIZE);\n          //     debugger\n          //     setLoading(false);\n          //     if (response.error) {\n          //       setGlobalError(true);\n          //       reject(response.error);\n          //     }\n          //     else {\n          //       if (response.response) {\n          //         debugger\n          //         const data = response.response.data.bib;\n          //         const bibsDataResult = data.map((bib_item) => new BibModel(bib_item.mms_id, bib_item.title));\n          //         debugger\n          //         resolve(bibsDataResult);\n          //       };\n          //     }\n          //   })\n          //   promises.push(promise);\n          // }\n          // Promise.all(promises).then(values => {\n          //   debugger\n          //   console.log(\"The valus are: \" + values);\n          //   bibDataTotalResults = values;\n          // });\n          setLoading(true);\n          await Promise.all(\n            functions.map(async (index) => {\n              const bibsResponse = await ApiDataService.getDataById(ApiDataService.types.COLLECTIONS, searchCollectionText, index, MAX_PAGE_SIZE)\n              if (bibsResponse.error) {\n                setGlobalError(true);\n                setErrorMessage(bibsResponse.error);\n              }\n              else {\n                if (bibsResponse.response) {\n                  const data = bibsResponse.response.data.bib;\n                  const dataArr = data.map((bib_item) => new BibModel(bib_item.mms_id, bib_item.title));\n                  bibDataTotalResults = [...bibDataTotalResults, ...dataArr];\n                  setPercentProgress(30);\n                  setLoading(false);\n                }\n              }\n            })\n          )\n        }\n\n        setLoading(true);\n        await Promise.all(\n          bibDataTotalResults.map(async (bib) => {\n            const bibResponse = await ApiDataService.getDataById(ApiDataService.types.NONE, bib.mmsid);\n            if (bibResponse.error) {\n              setGlobalError(true);\n              setErrorMessage(bibResponse.error);\n            }\n            else {\n              if (bibResponse.response) {\n                const bibMarcXmlData = bibResponse.response.data.anies[0];\n                let callNumber = getCallNumberField(bibMarcXmlData);\n                bib.setCallNumber(callNumber.replace(/ /g, ''));\n                setPercentProgress(60);\n              }\n            }\n          })\n        )\n        await Promise.all(\n          bibDataTotalResults.map(async (bib) => {\n            const repResponse = await ApiDataService.getDataById(ApiDataService.types.REPRESENTATIONS, bib.mmsid);\n            if (repResponse.error) {\n              setGlobalError(true);\n              setErrorMessage(repResponse.error);\n            }\n            else {\n              if (repResponse.response) {\n                if (repResponse.response.data.total_record_count > 0) {\n                  const repId = repResponse.response.data.representation[0] ? repResponse.response.data.representation[0].id : undefined;\n                  //const repId = repResponse.response.data.representation[0].thumbnail_url;\n                  const repUrl = repResponse.response.data.representation[0].delivery_url;\n                  if (!repId) {\n                    console.log(\"undefine!!!!\");\n                  }\n                  bib.setRepId(repId);\n                  bib.setRepUrl(repUrl);\n                }\n                else {\n                  bib.setRepId(\"אין תמונה\");\n                  bib.setRepUrl(\"\");\n                }\n                setPercentProgress(90);\n              }\n            }\n          })\n        )\n        setBibs(bibDataTotalResults);\n        setLoading(false);\n        // setLoading(true);\n        // //if (bibs.length == response.response.data.total_record_count) {\n        // bibsDataResult.forEach(bib => {\n        //   const bibResponse = ApiDataService.getDataById(ApiDataService.types.NONE, bib.mmsid);\n        //   if (bibResponse.error) {\n        //     setGlobalError(true);\n        //   }\n        //   else {\n        //     if (bibResponse.response) {\n        //       debugger\n        //       const bibMarcXmlData = bibResponse.response.data.anies;\n        //       getCallNumberField(bibMarcXmlData);\n        //     }\n        //   }\n        // });\n        // await Promise.all();\n        // setLoading(false);\n        // //}\n\n        //setBibs(data.map((plainBib) => new BibModel(plainBib)));\n        //setTotalPages(0);\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <div>\n          {globalError && <Alert variant=\"danger\">\n            {/* <Alert.Heading>Oh snap! You got an error!</Alert.Heading> */}\n            אירעה שגיאה\n            {/* <p>\n              הודעת שגיאה:\n              errorMessage\n            </p> */}\n          </Alert>}\n        </div>\n        <div style={{ margin: \"20px\" }}>\n          <h2>רשומות ביבליוגרפיות לפי מספר אוסף</h2>\n          <h4>:(collectionID יש להזין) הורדת קובץ אקסל של רשומות ביבליוגרפיות וקישורים לאובייקטים הדיגיטליים שבהן, על פי מספר אוסף בעלמא</h4>\n        </div>\n        <InputBox\n          icon={<i className=\"bi bi-collection-fill\"></i>}\n          placeholder=\"כאן יש להכניס מספר סט לחיפוש ...\"\n          onEnter={handleInputEnter}\n          inputText={searchCollectionText}\n          inputTextChange={(text) => setSearchCollectionText(text)}\n          onClear={clear}\n        />\n        <div className=\"p-bib-cards\">\n          {loading && <div className=\"p-subject-spinner\"><Spinner animation=\"border\" variant=\"primary\" /></div>}\n          {/* {loading && <ProgressComponent\n            percentProgress={percentProgress}\n            success={false} \n            warning={false} \n            error={false}\n          />} */}\n        </div>\n        {/* <Button variant=\"link\" onClick={() => downloadDocx()}><i className=\"bi bi-plus-circle-fill\" style={{ color: 'lightskyblue' }}></i>  לחיצה להמרה  </Button> */}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}